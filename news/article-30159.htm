<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://stashgithub.github.io/news/article-30159.htm" />
    <meta charset="utf-8">
    <title>如何在 Java 中实现 Dijkstra 最短路算法</title>
        <meta name="description" content="最短路问题的定义为：设\(G=(V,E)\) 为连通图，图中各边\((v_i,v_j)\) 有权\(l_{ij}\) （\(l_{ij}=\infty\) 表示\(v_i,v_j\) 间没有边） ，\" />
        <link rel="icon" href="/assets/website/img/stashgithub/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="Stash Github机场分享官网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://stashgithub.github.io/news/article-30159.htm" />
    <meta property="og:site_name" content="Stash Github机场分享官网" />
    <meta property="og:title" content="如何在 Java 中实现 Dijkstra 最短路算法" />
    <meta property="og:image" content="https://stashgithub.github.io/uploads/20240903-1/2349b67d05b32c4b514099101832ee0e.webp" />
        <meta property="og:release_date" content="2024-12-24T09:40:34" />
    <meta property="og:updated_time" content="2024-12-24T09:40:34" />
        <meta property="og:description" content="最短路问题的定义为：设\(G=(V,E)\) 为连通图，图中各边\((v_i,v_j)\) 有权\(l_{ij}\) （\(l_{ij}=\infty\) 表示\(v_i,v_j\) 间没有边） ，\" />
        
    <meta content="width=device-width, initial-scale=1.0" name="viewport">
    <!-- Google Web Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>

    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="如何在 Java 中实现 Dijkstra 最短路算法">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600&family=Raleway:wght@600;800&display=swap" rel="stylesheet">
    <!-- Icon Font Stylesheet -->
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.15.4/css/all.css" />
    <link href="https://cdn.bootcdn.net/ajax/libs/bootstrap-icons/1.4.1/font/bootstrap-icons.css" rel="stylesheet">
    <!-- Libraries Stylesheet -->
    <link href="/assets/website/js/frontend/stashgithub/lightbox/css/lightbox.min.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/stashgithub/owlcarousel/assets/owl.carousel.min.css" rel="stylesheet">
    <!-- Customized Bootstrap Stylesheet -->
    <link href="/assets/website/css/stashgithub/bootstrap.min.css" rel="stylesheet">
    <!-- Template Stylesheet -->
    <link href="/assets/website/css/stashgithub/style.css" rel="stylesheet">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-NNXJ21P00N"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-NNXJ21P00N');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!-- Spinner Start -->
    <div id="spinner" class="show w-100 vh-100 bg-white position-fixed translate-middle top-50 start-50  d-flex align-items-center justify-content-center">
        <div class="spinner-grow text-primary" role="status"></div>
    </div>
    <!-- Spinner End -->
    <!-- Navbar start -->
    <div class="container-fluid fixed-top">
        <div class="container topbar bg-primary d-none d-lg-block">
            <div class="d-flex justify-content-between">
                
            </div>
        </div>
        <div class="container px-0">
            <nav class="navbar navbar-light bg-white navbar-expand-xl">
                                <a href="/" class="navbar-brand">
                    <span class="text-primary display-6">Stash Github</span>
                </a>
                                <button class="navbar-toggler py-2 px-3" type="button" data-bs-toggle="collapse" data-bs-target="#navbarCollapse">
                    <span class="fa fa-bars text-primary"></span>
                </button>
                <div class="collapse navbar-collapse bg-white" id="navbarCollapse">
                    <div class="navbar-nav mx-auto">
                                                <a href="/" class="nav-item nav-link">首页</a>
                                                <a href="/free-nodes/" class="nav-item nav-link">免费节点</a>
                                                <a href="/paid-subscribe/" class="nav-item nav-link">推荐机场</a>
                                                <a href="/news/" class="nav-item nav-link">新闻资讯</a>
                                                <a href="#" class="nav-item nav-link">关于</a>
                        <a href="#" class="nav-item nav-link">联系</a>
                    </div>
                </div>
            </nav>
        </div>
    </div>
    <!-- Navbar End -->
    <!-- Single Page Header start -->
    <div class="container-fluid page-header py-5">
        <h1 class="text-center text-white display-6">如何在 Java 中实现 Dijkstra 最短路算法</h1>
        <ol class="breadcrumb justify-content-center mb-0">
            <li class="breadcrumb-item"><a href="/">首页</a></li>
            <li class="breadcrumb-item"><a href="/news/">新闻资讯</a></li>
            <li class="breadcrumb-item active text-white">正文</li>
        </ol>
    </div>
    <!-- Single Page Header End -->
    <!-- Fruits Shop Start-->
    <div class="container-fluid fruite py-5">
        <div class="container py-2">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="StashNode免费订阅官网" data-url="https://stashnode.github.io">
                  				  				  				</h1> <p>最短路问题的定义为：设<span class="math inline">\(G=(V,E)\)</span> 为连通图，图中各边<span class="math inline">\((v_i,v_j)\)</span> 有权<span class="math inline">\(l_{ij}\)</span> （<span class="math inline">\(l_{ij}=\infty\)</span> 表示<span class="math inline">\(v_i,v_j\)</span> 间没有边） ，<span class="math inline">\(v_s,v_t\)</span> 为图中任意两点，求一条道路<span class="math inline">\(\mu\)</span>，使得它是从<span class="math inline">\(v_s\)</span> 到<span class="math inline">\(v_t\)</span> 的所有路中总权最小的路，即：<span class="math inline">\(L(\mu)=\sum_{(v_i,v_j)\in \mu}l_{ij}\)</span> 最小。</p> <p>下图左侧是一幅带权有向图，以顶点 0 为起点到各个顶点的最短路径形成的最短路径树如下图右侧所示：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/070ffacc6fb00452f76a54f1ca4a90d4.jpg" alt="如何在 Java 中实现 Dijkstra 最短路算法"></p> </h1> <p>在实现最短路算法之前需要先实现带权有向图。在上一篇博客<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.cnblogs.com/zhiyiYo/p/16110123.html"  target="_blank" rel="nofollow">《如何在 Java 中实现最小生成树算法》</a> 中我们实现了带权无向图，只需一点修改就能实现带权有向图。</p> <h2 id="带权有向边">带权有向边</h2> <p>首先应该实现带权有向图中的边<code>DirectedEdge</code>，这个类有三个成员变量：指出边的顶点<code>v</code>、边指向的顶点<code>w</code> 和边的权重<code>weight</code>。代码如下所示：</p> <pre><code class="language-java">package com.zhiyiyo.graph;  /**  * 带权有向边  */ public class DirectedEdge {     int v, w;     double weight;      public DirectedEdge(int v, int w, double weight) {         this.v = v;         this.w = w;         this.weight = weight;     }      public int from() {         return v;     }      public int to() {         return w;     }      public double getWeight() {         return weight;     }      @Override     public String toString() {         return String.format("%d-&gt;%d(%.2f)", v, w, weight);     } }</code></pre> <h2 id="带权有向图">带权有向图</h2> <p>带权有向图的实现非常简单，只需将带权无向图使用的<code>Edge</code> 类换成<code>DirectedEdge</code> 类，并作出少许调整即可：</p> <pre><code class="language-java">package com.zhiyiyo.graph;  import com.zhiyiyo.collection.stack.LinkStack; import com.zhiyiyo.collection.stack.Stack;  public class WeightedDigraph {     private final int V;     protected int E;     protected LinkStack&lt;DirectedEdge&gt;[] adj;      public WeightedDigraph(int V) {         this.V = V;         adj = (LinkStack&lt;DirectedEdge&gt;[]) new LinkStack[V];         for (int i = 0; i &lt; V; i++) {             adj[i] = new LinkStack&lt;&gt;();         }     }      public int V() {         return V;     }      public int E() {         return E;     }      public void addEdge(DirectedEdge edge) {         adj[edge.from()].push(edge);         E++;     }      public Iterable&lt;DirectedEdge&gt; adj(int v) {         return adj[v];     }      public Iterable&lt;DirectedEdge&gt; edges() {         Stack&lt;DirectedEdge&gt; edges = new LinkStack&lt;&gt;();         for (int v = 0; v &lt; V; ++v) {             for (DirectedEdge edge : adj(v)) {                 edges.push(edge);             }         }          return edges;     } }</code></pre> </h1> <h2 id="api">API</h2> <p>最短路算法应该支持起始点<span class="math inline">\(v_s\)</span> 到任意顶点<span class="math inline">\(v_t\)</span> 的最短距离和最短路径的查询：</p> <pre><code class="language-java">package com.zhiyiyo.graph;  /**  * 最短路径  */ public interface ShortestPath {     /**      * 从起点到顶点 v 的最短距离，如果顶点 v 不可达则为无穷大      * @param v 顶点 v      * @return 最短路径      */     double distTo(int v);      /**      * 是否存在从起点到顶点 v 的路径      * @param v 顶点 v      * @return 是否存在      */     boolean hasPathTo(int v);      /**      * 从起点到顶点 v 的最短路径，若不存在则返回 null      * @param v 顶点 v      * @return 最短路径      */     Iterable&lt;DirectedEdge&gt; pathTo(int v); }</code></pre> <h2 id="dijkstra-算法">Dijkstra 算法</h2> <p>我们可以使用一个距离数组<code>distTo[]</code> 来保存起始点<span class="math inline">\(v_s\)</span> 到其余顶点<span class="math inline">\(v_t\)</span> 的最短路径，且<code>distTo[]</code> 数组满足以下条件：</p> <div class="math display">\[distTo(t) = \left\{<br /> \begin{aligned}<br /> 0 \quad &amp; t=s \\<br /> l_{st} \quad &amp; t\neq s 且\ t\ 可达\\<br /> \infty \quad &amp; t\ 不可达<br /> \end{aligned}<br /> \right.<br /> \]</div> <p>可以使用<code>Double.POSITIVE_INFINITY</code> 来表示无穷大，有了<code>distTo[]</code> 之后就能实现<code>ShortestPath</code> 前两个方法：</p> <pre><code class="language-java">package com.zhiyiyo.graph;   public class DijkstraSP implements ShortestPath {     private double[] distTo;      @Override     public double distTo(int v) {         return distTo[v];     }      @Override     public boolean hasPathTo(int v) {         return distTo[v] &lt; Double.POSITIVE_INFINITY;     } }</code></pre> <p>为了保存<span class="math inline">\(v_s\)</span> 到<span class="math inline">\(v_t\)</span> 的最短路径，可以使用一个边数组<code>edgeTo[]</code>，其中<code>edgeTo[v] = e_wv</code> 表示要想到达<span class="math inline">\(v_t\)</span>，需要先经过顶点<span class="math inline">\(v_w\)</span>，接着从<code>edgeTo[w]</code>获取到达<span class="math inline">\(v_w\)</span> 之前需要到达的上一个节点，重复上述步骤直到发现<code>edgeTo[i] = null</code>，这时候就说明我们回到了<span class="math inline">\(v_s\)</span>。  获取最短路径的代码如下所示：</p> <pre><code class="language-java">@Override public Iterable&lt;DirectedEdge&gt; pathTo(int v) {     if (!hasPathTo(v)) return null;     Stack&lt;DirectedEdge&gt; path = new LinkStack&lt;&gt;();     for (DirectedEdge e = edgeTo[v]; e != null; e = edgeTo[e.from()]) {         path.push(e);     }     return path; }</code></pre> <h3 id="算法流程">算法流程</h3> <p>虽然我们已经实现了上述接口，但是如何得到<code>distTo[]</code> 和<code>edgeTo[]</code> 还是个问题，这就需要用到 Dijkstra 算法了。算法的思想是这样的：</p> <ol> <li> <p>初始化<code>distTo[]</code> 使得除了<code>distTo<span class="show-more" title="文字折叠"><span><i class="be be-squareplus"></i>展开</span></span> = 0</code> 外，其余的元素都为<code>Double.POSITIVE_INFINITY</code>。同时初始化<code>edgeTo[]</code> 的每个元素都是<code>null</code>；</p> </li> <li> <p>将顶点 s 的所有相邻顶点<span class="math inline">\(v_j\)</span> 加入集合<span class="math inline">\(V'\)</span> 中，设置<code>distTo[j] = l_sj</code> 即初始化最短距离为邻边的权重；</p> </li> <li> <p>从<span class="math inline">\(V'\)</span> 中取出距离最短即<code>distTo[m]</code> 最小的顶点<span class="math inline">\(v_m\)</span>，遍历<span class="math inline">\(v_m\)</span> 的所有邻边<span class="math inline">\((v_m, v_w)\)</span>，如果有<span class="math inline">\(l_{mw}+l_{sm}&lt;l_{sw}\)</span>，就说明从<span class="math inline">\(v_s\)</span> 走到<span class="math inline">\(v_m\)</span> 再一步走到<span class="math inline">\(v_w\)</span> 距离最短，我们就去更新<code>distTo[m]</code>，同时将<span class="math inline">\(v_w\)</span> 添加到<span class="math inline">\(V'\)</span> 中（如果<span class="math inline">\(v_w\)</span> 不在的话）；</p> </li> <li> <p>重复上述过程直到<span class="math inline">\(V'\)</span> 变为空，我们就已经找到了所有<span class="math inline">\(v_s\)</span> 可达的顶点的最短路径。</p> </li> </ol> <p>上述过程中有个地方会影响算法的性能，就是如何从<span class="math inline">\(V'\)</span> 中取出最小距离对应的顶点<span class="math inline">\(v_m\)</span>。如果直接遍历<span class="math inline">\(V'\)</span> 最坏情况下时间复杂度为<span class="math inline">\(O(|V|)\)</span>，如果换成最小索引优先队列则可以将时间复杂度降至<span class="math inline">\(O(\log|V|)\)</span>。</p> <h3 id="最小索引优先队列">最小索引优先队列</h3> <p>上一篇博客<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.cnblogs.com/zhiyiYo/p/16110123.html"  target="_blank" rel="nofollow">《如何在 Java 中实现最小生成树算法》</a> 中介绍了最小堆的使用，最小堆可以在对数时间内取出数据集合中的最小值，对应到最短路算法中就是最短路径。但是有一个问题，就是我们想要的是最短路径对应的那个顶点<span class="math inline">\(v_m\)</span>，只使用最小堆是做不到这一点的。如何能将最小堆中的距离值和顶点进行绑定呢？这就要用到索引优先队列。</p> <p>索引优先队列的 API 如下所示，可以看到每个元素<code>item</code> 都和一个索引<code>k</code> 进行绑定，我们可以通过索引<code>k</code> 读写优先队列中的元素。想象一下堆中的所有元素放在一个数组<code>pq</code> 中，索引优先队列可以做到在对数时间内取出<code>pq</code> 的最小值。</p> <pre><code class="language-java">package com.zhiyiyo.collection.queue;  /**  * 索引优先队列  */ public interface IndexPriorQueue&lt;K extends Comparable&lt;K&gt;&gt; {     /**      * 向堆中插入一个元素      *      * @param k 元素的索引      * @param item 插入的元素      */     void insert(int k, K item);      /**      * 修改堆中指定索引的元素值      * @param k 元素的索引      * @param item 新的元素值      */     void change(int k, K item);      /**      * 向堆中插入或修改元素      * @param k 元素的索引      * @param item 新的元素值      */     void set(int k, K item);      /**      * 堆是否包含索引为 k 的元素      * @param k 索引      * @return 是否包含      */     boolean contains(int k);      /**      * 弹出堆顶的元素并返回其索引      * @return 堆顶元素的索引      */     int pop();      /**      * 弹出堆中索引为 k 为元素      * @param k 索引      * @return 索引对应的元素      */     K delete(int k);      /**      * 获取堆中索引为 k 的元素，如果 k 不存在则返回 null      * @param k 索引      * @return 索引为 k 的元素      */     K get(int k);      /**      * 获取堆中的元素个数      */     int size();      /**      * 堆是否为空      */     boolean isEmpty(); }</code></pre> <p>实现索引优先队列比优先队列麻烦一点，因为需要维护每个元素的索引。之前我们是将元素按照完全二叉树的存放顺序进行存储，现在可以换成索引，而元素只需根据索引值<code>k</code> 放在数组<code>keys[k]</code> 处即可。只有索引数组<code>indexes[]</code> 和元素数组<code>keys[]</code> 还不够，如果我们想实现<code>contains(int k)</code> 方法，目前只能遍历一下<code>indexes[]</code>，看看<code>k</code> 在不在里面，时间复杂度是<span class="math inline">\(O(|V|)\)</span>。何不多维护一个数组<code>nodeIndexes[]</code>，使得它满足下述关系：</p> <div class="math display">\[\text{nodeIndexes}(k) = \left\{<br /> \begin{aligned}<br /> d \quad &amp; k \in \text{indexes} \\<br /> -1 \quad &amp; k \notin \text{indexes}<br /> \end{aligned}<br /> \right.<br /> \]</div> <p>如果能在<code>nodeIndexes[k]</code> 不是 -1，就说明索引<span class="math inline">\(k\)</span> 对应的元素存在与堆中，且索引 k 在<code>indexes[]</code> 中的位置为<span class="math inline">\(d\)</span>，即有下述等式成立：</p> <div class="math display">\[\text{indexes}[\text{nodeIndexes}[k]] = k\\<br /> \text{nodeIndexes}[\text{indexes}[d]] = d<br /> \]</div> <p>有了这三个数组之后我们就可以实现最小索引优先队列了：</p> <pre><code class="language-java">package com.zhiyiyo.collection.queue;  import java.util.Arrays; import java.util.NoSuchElementException;  /**  * 最小索引优先队列  */ public class IndexMinPriorQueue&lt;K extends Comparable&lt;K&gt;&gt; implements IndexPriorQueue&lt;K&gt; {     private K[] keys;           // 元素     private int[] indexes;      // 元素的索引，按照最小堆的顺序摆放     private int[] nodeIndexes;  // 元素的索引在完全二叉树中的编号     private int N;      public IndexMinPriorQueue(int maxSize) {         keys = (K[]) new Comparable[maxSize + 1];         indexes = new int[maxSize + 1];         nodeIndexes = new int[maxSize + 1];         Arrays.fill(nodeIndexes, -1);     }      @Override     public void insert(int k, K item) {         keys[k] = item;         indexes[++N] = k;         nodeIndexes[k] = N;         swim(N);     }      @Override     public void change(int k, K item) {         validateIndex(k);         keys[k] = item;         swim(nodeIndexes[k]);         sink(nodeIndexes[k]);     }      @Override     public void set(int k, K item) {         if (!contains(k)) {             insert(k, item);         } else {             change(k, item);         }     }      @Override     public boolean contains(int k) {         return nodeIndexes[k] != -1;     }      @Override     public int pop() {         int k = indexes[1];         delete(k);         return k;     }      @Override     public K delete(int k) {         validateIndex(k);         K item = keys[k];         // 交换之后 nodeIndexes[k] 发生变化，必须先保存为局部变量         int nodeIndex = nodeIndexes[k];         swap(nodeIndex, N--);         // 必须有上浮的操作，交换后的元素可能比上面的元素更小         swim(nodeIndex);         sink(nodeIndex);         keys[k] = null;         nodeIndexes[k] = -1;         return item;     }      @Override     public K get(int k) {         return contains(k) ? keys[k] : null;     }      public K min() {         return keys[indexes[1]];     }      /**      * 获取最小的元素对应的索引      */     public int minIndex() {         return indexes[1];     }      @Override     public int size() {         return N;     }      @Override     public boolean isEmpty() {         return N == 0;     }      /**      * 元素上浮      *      * @param k 元素的索引      */     private void swim(int k) {         while (k &gt; 1 &amp;&amp; less(k, k / 2)) {             swap(k, k / 2);             k /= 2;         }     }      /**      * 元素下沉      *      * @param k 元素的索引      */     private void sink(int k) {         while (2 * k &lt;= N) {             int j = 2 * k;             // 检查是否有两个子节点             if (j &lt; N &amp;&amp; less(j + 1, j)) j++;             if (less(k, j)) break;             swap(k, j);             k = j;         }     }      /**      * 交换完全二叉树中编号为 a 和 b 的节点      *      * @param a 索引 a      * @param b 索引 b      */     private void swap(int a, int b) {         int k1 = indexes[a], k2 = indexes[b];         nodeIndexes[k2] = a;         nodeIndexes[k1] = b;         indexes[a] = k2;         indexes[b] = k1;     }      private boolean less(int a, int b) {         return keys[indexes[a]].compareTo(keys[indexes[b]]) &lt; 0;     }      private void validateIndex(int k) {         if (!contains(k)) {             throw new NoSuchElementException("索引" + k + "不在优先队列中");         }     } }</code></pre> <p>注意对比最小堆和最小索引堆的<code>swap(int a, int b)</code> 方法以及<code>less(int a, int b)</code> 方法，在交换堆中的元素时使用的依据是元素的大小，交换之后无需调整<code>keys[]</code>，而是交换<code>nodeIndexes[]</code> 和<code>indexes[]</code> 中的元素。</p> <h3 id="实现算法">实现算法</h3> <p>通过上述的分析，实现 Dijkstra 算法就很简单了，时间复杂度为<span class="math inline">\(O(|E|\log |V|)\)</span>：</p> <pre><code class="language-java">package com.zhiyiyo.graph;  import com.zhiyiyo.collection.queue.IndexMinPriorQueue; import com.zhiyiyo.collection.stack.LinkStack; import com.zhiyiyo.collection.stack.Stack;  import java.util.Arrays;  public class DijkstraSP implements ShortestPath {     private double[] distTo;     private DirectedEdge[] edgeTo;     private IndexMinPriorQueue&lt;Double&gt; pq;     private int s;      public DijkstraSP(WeightedDigraph graph, int s) {         pq = new IndexMinPriorQueue&lt;&gt;(graph.V());         edgeTo = new DirectedEdge[graph.V()];          // 初始化距离         distTo = new double[graph.V()];         Arrays.fill(distTo, Double.POSITIVE_INFINITY);         distTo<span class="show-more" title="文字折叠"><span><i class="be be-squareplus"></i>展开</span></span> = 0;          visit(graph, s);         while (!pq.isEmpty()) {             visit(graph, pq.pop());         }     }      private void visit(WeightedDigraph graph, int v) {         for (DirectedEdge edge : graph.adj(v)) {             int w = edge.to();             if (distTo[w] &gt; distTo[v] + edge.getWeight()) {                 distTo[w] = distTo[v] + edge.getWeight();                 edgeTo[w] = edge;                 pq.set(w, distTo[w]);             }         }     }      // 省略已实现的方法 ... }</code></pre> </h1> <p>Dijkstra 算法还能继续优化，将最小索引堆换成斐波那契堆之后时间复杂度为<span class="math inline">\(O(|E|+|V|\log |V|)\)</span>，这里就不写了（<s>因为还没学到斐波那契堆</s>），以上~~</p> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-29682.htm">动物防疫计划表（动物防疫年度计划）</a></p>
                                        <p>下一个：<a href="/news/article-30160.htm">mac系统升级导致VirtualBox报Kernel driver not installed (rc=-1908)_在线工具</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-43263.htm" title="Citus 分布式 PostgreSQL 集群 &#8211; SQL Reference(查询分布式表 SQL)">Citus 分布式 PostgreSQL 集群 &#8211; SQL Reference(查询分布式表 SQL)</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-16-free-node-subscribe.htm" title="「11月16日」最高速度21.4M/S，2024年Stash Github每天更新免费机场订阅节点链接">「11月16日」最高速度21.4M/S，2024年Stash Github每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-26-node-share-links.htm" title="「1月26日」最高速度20.1M/S，2025年V2ray/Shadowrocket/SSR/ClashStash免费机场订阅链接">「1月26日」最高速度20.1M/S，2025年V2ray/Shadowrocket/SSR/ClashStash免费机场订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-2-node-share.htm" title="「2月2日」最高速度22.8M/S，2025年V2ray/Clash/SSR/ShadowrocketStash免费机场订阅链接">「2月2日」最高速度22.8M/S，2025年V2ray/Clash/SSR/ShadowrocketStash免费机场订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-21-free-high-speed-nodes.htm" title="「12月21日」最高速度22.3M/S，2024年Stash Github每天更新免费机场订阅节点链接">「12月21日」最高速度22.3M/S，2024年Stash Github每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-5-free-subscribe-node.htm" title="「12月5日」最高速度18.9M/S，2024年Stash Github每天更新免费机场订阅节点链接">「12月5日」最高速度18.9M/S，2024年Stash Github每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/news/article-38794.htm" title="宠物店从哪进货（宠物店从哪进货好）">宠物店从哪进货（宠物店从哪进货好）</a></li>
                        <li class="py-2"><a href="/news/article-33494.htm" title="宠物粮食品牌排名榜最新 宠物粮食品牌排名榜最新名单">宠物粮食品牌排名榜最新 宠物粮食品牌排名榜最新名单</a></li>
                        <li class="py-2"><a href="/news/article-25487.htm" title="动物门诊的程序和方法技术（动物门诊图片）">动物门诊的程序和方法技术（动物门诊图片）</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-22-free-node-subscribe-links.htm" title="「11月22日」最高速度20.3M/S，2024年Stash Github每天更新免费机场订阅节点链接">「11月22日」最高速度20.3M/S，2024年Stash Github每天更新免费机场订阅节点链接</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">6</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">92</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">92</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">27</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </div>
    <!-- Fruits Shop End-->
        <!-- Copyright Start -->
    <div class="container-fluid copyright bg-dark py-4">
        <div class="container">
            <div class="row">
                <div class="col-md-12 text-center mb-3 mb-md-0">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                    <span class="text-light">Stash Github机场分享官网 版权所有 Powered by WordPress</span>
                </div>
            </div>
        </div>
    </div>
    <!-- Copyright End -->
    <!-- Back to Top -->
    <a href="#" class="btn btn-primary border-3 border-primary rounded-circle back-to-top"><i class="fa fa-arrow-up"></i></a>
    <!-- JavaScript Libraries -->
    <script src="https://cdn.bootcdn.net/ajax/libs/jquery/3.6.4/jquery.min.js"></script>
    <script src="https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/5.0.0/js/bootstrap.bundle.min.js"></script>
    <script src="/assets/website/js/frontend/stashgithub/easing/easing.min.js"></script>
    <script src="/assets/website/js/frontend/stashgithub/waypoints/waypoints.min.js"></script>
    <script src="/assets/website/js/frontend/stashgithub/lightbox/js/lightbox.min.js"></script>
    <script src="/assets/website/js/frontend/stashgithub/owlcarousel/owl.carousel.min.js"></script>
    <!-- Template Javascript -->
    <script src="/assets/website/js/frontend/stashgithub/main.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>