<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://stashgithub.github.io/news/article-85754.htm" />
    <meta charset="utf-8">
    <title>分布式一致性算法 Raft</title>
        <meta name="description" content="一、Raft 算法背景 在学术理论界，分布式一致性算法的代表还是 Paxos，但是少数理解的人觉得很简单，尚未理解的觉得很难，大多数人还是一知半解。Paxos 的可理解性 &amp; 工程落地性的门槛" />
        <link rel="icon" href="/assets/website/img/stashgithub/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="Stash Github机场分享官网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://stashgithub.github.io/news/article-85754.htm" />
    <meta property="og:site_name" content="Stash Github机场分享官网" />
    <meta property="og:title" content="分布式一致性算法 Raft" />
    <meta property="og:image" content="https://stashgithub.github.io/uploads/20240903-1/d8828431b484477719c0f8023f2403c0.webp" />
        <meta property="og:release_date" content="2025-04-01T09:45:57" />
    <meta property="og:updated_time" content="2025-04-01T09:45:57" />
        <meta property="og:description" content="一、Raft 算法背景 在学术理论界，分布式一致性算法的代表还是 Paxos，但是少数理解的人觉得很简单，尚未理解的觉得很难，大多数人还是一知半解。Paxos 的可理解性 &amp; 工程落地性的门槛" />
        
    <meta content="width=device-width, initial-scale=1.0" name="viewport">
    <!-- Google Web Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>

    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="分布式一致性算法 Raft">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600&family=Raleway:wght@600;800&display=swap" rel="stylesheet">
    <!-- Icon Font Stylesheet -->
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.15.4/css/all.css" />
    <link href="https://cdn.bootcdn.net/ajax/libs/bootstrap-icons/1.4.1/font/bootstrap-icons.css" rel="stylesheet">
    <!-- Libraries Stylesheet -->
    <link href="/assets/website/js/frontend/stashgithub/lightbox/css/lightbox.min.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/stashgithub/owlcarousel/assets/owl.carousel.min.css" rel="stylesheet">
    <!-- Customized Bootstrap Stylesheet -->
    <link href="/assets/website/css/stashgithub/bootstrap.min.css" rel="stylesheet">
    <!-- Template Stylesheet -->
    <link href="/assets/website/css/stashgithub/style.css" rel="stylesheet">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-NNXJ21P00N"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-NNXJ21P00N');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!-- Spinner Start -->
    <div id="spinner" class="show w-100 vh-100 bg-white position-fixed translate-middle top-50 start-50  d-flex align-items-center justify-content-center">
        <div class="spinner-grow text-primary" role="status"></div>
    </div>
    <!-- Spinner End -->
    <!-- Navbar start -->
    <div class="container-fluid fixed-top">
        <div class="container topbar bg-primary d-none d-lg-block">
            <div class="d-flex justify-content-between">
                
            </div>
        </div>
        <div class="container px-0">
            <nav class="navbar navbar-light bg-white navbar-expand-xl">
                <a href="/" class="navbar-brand">
                                <span class="text-primary display-6">Stash Github</span>
                                </a>
                <button class="navbar-toggler py-2 px-3" type="button" data-bs-toggle="collapse" data-bs-target="#navbarCollapse">
                    <span class="fa fa-bars text-primary"></span>
                </button>
                <div class="collapse navbar-collapse bg-white" id="navbarCollapse">
                    <div class="navbar-nav mx-auto">
                                                <a href="/" class="nav-item nav-link">首页</a>
                                                <a href="/free-nodes/" class="nav-item nav-link">免费节点</a>
                                                <a href="/paid-subscribe/" class="nav-item nav-link">推荐机场</a>
                                                <a href="/client.htm" class="nav-item nav-link">客户端</a>
                                                <a href="/news/" class="nav-item nav-link">新闻资讯</a>
                                            </div>
                </div>
            </nav>
        </div>
    </div>
    <!-- Navbar End -->
    <!-- Single Page Header start -->
    <div class="container-fluid page-header py-5">
        <h1 class="text-center text-white display-6">分布式一致性算法 Raft</h1>
        <ol class="breadcrumb justify-content-center mb-0">
            <li class="breadcrumb-item"><a href="/">首页</a></li>
            <li class="breadcrumb-item"><a href="/news/">新闻资讯</a></li>
            <li class="breadcrumb-item active text-white">正文</li>
        </ol>
    </div>
    <!-- Single Page Header End -->
    <!-- Fruits Shop Start-->
    <div class="container-fluid fruite py-5">
        <div class="container py-2">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="StashNode免费订阅官网" data-url="https://stashnode.github.io">
                  				  				  				<div id="content_views" class="htmledit_views"> <h3><strong>一、Raft 算法背景</strong></h3> <p>在学术理论界，分布式一致性算法的代表还是 Paxos，但是少数理解的人觉得很简单，尚未理解的觉得很难，大多数人还是一知半解。Paxos 的可理解性 &amp; 工程落地性的门槛很高。斯坦福学者花了很多时间理解 Paxos，于是他们研究出来 Raft。本文主要是介绍 Raft 算法的基本原理。</p> <h3><strong>二、Raft 算法基本原理</strong></h3> <p>共识算法就是保证一个集群的多台机器协同工作，在遇到请求时，数据能够保持一致。即使遇到机器宕机，整个系<strong>统仍然能够对外保持</strong>服务的可用性。</p> <p>Raft 将共识问题分解三个子问题：</p> <ol> <li><strong>Leader election 领导选举</strong>：有且仅有一个 leader 节点，如果 leader 宕机，通过选举机制选出新的 leader；</li> <li><strong>Log replication 日志复制</strong>：leader 从客户端接收数据更新/删除请求，然后日志复制到 follower 节点，从而保证集群数据的一致性；</li> <li><strong>Safety 安全性</strong>：通过安全性原则来处理一些特殊 case，保证 Raft 算法的完备性；</li> </ol> <p>所以，Raft 算法核心流程可以归纳为：</p> <ul> <li>首先选出 leader，leader 节点负责接收外部的数据更新/删除请求；</li> <li>然后日志复制到其他 follower 节点，同时通过安全性的准则来保证整个日志复制的一致性；</li> <li>如果遇到 leader 故障，followers 会重新发起选举出新的 leader；</li> </ul> <p>这里先介绍一下日志同步的概念：服务器接收客户的数据更新/删除请求，这些请求会落地为命令日志。只要输入状态机的日志命令相同，状态机的执行结果就相同。所以 Raft 的核心就是 leader 发出日志同步请求，follower 接收并同步日志，最终保证整个集群的日志一致性。</p> <p class="img-center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads/20221130/2802f5db3985758d6fbe136590744324.jpg"></p> <h3><strong>2.1 Leader Election 领导选举</strong></h3> <p>集群中每个节点只能处于 Leader、Follower 和 Candidate 三种状态的一种:</p> <ol> <li><strong>follower 从节点</strong>：</li> </ol> <ul> <li>节点默认是 follower；</li> <li>如果**刚刚开始 ** 或<strong>和 leader 通信超时</strong>，follower 会发起选举，变成 candidate，然后去竞选 leader；</li> <li>如果收到其他 candidate 的竞选投票请求，按照<strong>先来先得</strong>&nbsp;&amp;<strong>每个任期只能投票一次</strong>&nbsp;的投票原则投票;</li> </ul> <ol> <li><strong>candidate 候选者</strong>：</li> </ol> <ul> <li>follower 发起选举后就变为 candidate，会向其他节点拉选票。candidate 的票会投给自己，所以不会向其他节点投票</li> <li>如果获得超过<strong>半数</strong>的投票，candidate 变成 leader，然后马上和其他节点通信，表明自己的 leader 的地位；</li> <li>如果选举超时，重新发起选举；</li> <li>如果遇到更高任期 Term 的 leader 的通信请求，转化为 follower；</li> </ul> <ol> <li><strong>leader 主节点</strong>：</li> </ol> <ul> <li>成为 leader 节点后，此时可以接受客户端的数据请求，负责日志同步；</li> <li>如果遇到更高任期 Term 的 candidate 的通信请求，这说明 candidate 正在竞选 leader，此时之前任期的 leader 转化为 follower，且完成投票；</li> <li>如果遇到更高任期 Term 的 leader 的通信请求，这说明已经选举成功新的 leader，此时之前任期的 leader 转化为 follower；</li> </ul> <p>具体的节点状态转换参考下图：</p> <p class="img-center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads/20221130/a76e5fdd8734c0f51abd1739e8bf8e67.jpg"></p> <p>Raft 算法把时间轴划分为不同任期 Term。每个任期 Term 都有自己的编号 TermId，该编号全局唯一且单调递增。如下图，每个任务的开始都** Leader Election 领导选举**。如果选举成功，则进入维持任务 Term 阶段，此时 leader 负责接收客户端请求并，负责复制日志。Leader 和所有 follower 都保持通信，如果 follower 发现通信超时，TermId 递增并发起新的选举。如果选举成功，则进入新的任期。如果选举失败，TermId 递增，然后重新发起选举直到成功。</p> <p>举个例子，参考下图，Term N 选举成功，Term N+1 和 Term N+2 选举失败，Term N+3 重新选举成功。</p> <p class="img-center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads/20221130/51b102ac06536c3698f0d4da6429c281.jpg"></p> <p>具体的说，Leader 在任期内会周期性向其他 follower 节点发送心跳来维持地位。follower 如果发现心跳超时，就认为 leader 节点宕机或不存在。随机等待一定时间后，follower 会发起选举，变成 candidate，然后去竞选 leader。选举结果有三种情况：</p> <ol> <li><strong>获取超过半数投票，赢得选举</strong>：</li> </ol> <ul> <li>当 Candidate 获得超过半数的投票时，代表自己赢得了选举，且转化为 leader。此时，它会马上向其他节点发送请求，从而确认自己的 leader 地位，从而阻止新一轮的选举；</li> <li><strong>投票原则</strong>：当多个 Candidate 竞选 Leader 时： <ul> <li>一个任期内，follower 只会<strong>投票一次票</strong>，且投票<strong>先来显得</strong>；</li> <li>Candidate 存储的日志至少要和 follower 一样新（<strong>安全性准则</strong>），否则拒绝投票；</li> </ul> </li> </ul> <p style="text-align:center;"><img decoding="async" alt="" src="http://img.555519.xyz/uploads/20221130/30c3ecbf1af6c7abe2fc9e950cb2068f.jpg"></p> <p><strong>资料领取直通车：</strong><a class="has-card" href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://docs.qq.com/doc/DTlhVekRrZUdDUEpy"  title="大厂面试题锦集+视频教程" rel="nofollow"><span class="link-card-box"><span class="link-title">大厂面试题锦集+视频教程</span><span class="link-link"><img decoding="async" class="link-link-icon" src="http://img.555519.xyz/uploads/20221130/28d9dce9277d02bd26f3a05afd9d62c8.jpg" alt="分布式一致性算法 Raft">https://docs.qq.com/doc/DTlhVekRrZUdDUEpy</span></span></a></p> <p><strong>Linux服务器学习网站：</strong><a class="has-card" href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://ke.qq.com/course/417774?flowToken=1028592"  title="C/C++Linux服务器开发/后台架构师" rel="nofollow"><span class="link-card-box"><span class="link-title">C/C++Linux服务器开发/后台架构师</span><span class="link-link"><img decoding="async" class="link-link-icon" src="http://img.555519.xyz/uploads/20221130/28d9dce9277d02bd26f3a05afd9d62c8.jpg" alt="分布式一致性算法 Raft">https://ke.qq.com/course/417774?flowToken=1028592</span></span></a></p> <ol> <li><strong>投票未超过半数，选举失败</strong>：</li> </ol> <ul> <li>当 Candidate 没有获得超过半数的投票时，说明多个 Candidate 竞争投票导致过于分散，或者出现了丢包现象。此时，认为当期任期选举失败，任期 TermId+1，然后发起新一轮选举；</li> <li>上述机制可能出现多个 Candidate 竞争投票，导致每个 Candidate 一直得不到超过半数的票，最终导致无限选举投票循环；</li> <li><strong>投票分散问题解决：</strong>&nbsp;Raft 会给每个 Candidate 在固定时间内随机确认一个超时时间（一般为 150-300ms）。这么做可以尽量避免新的一次选举出现多个 Candidate 竞争投票的现象；</li> </ul> <ol> <li><strong>收到其他 Leader 通信请求</strong>：</li> </ol> <ul> <li>如果 Candidate 收到其他声称自己是 Leader 的请求的时候，通过任期 TermId 来判断是否处理；</li> <li>如果请求的任期 TermId 不小于 Candidate 当前任期 TermId，那么 Candidate 会承认该 Leader 的合法地位并转化为 Follower；</li> <li>否则，拒绝这次请求，并继续保持 Candidate；</li> </ul> <p>简单的多，<strong>Leader Election 领导选举</strong>&nbsp;通过若干的投票原则，保证一次选举有且仅可能最多选出一个 leader，从而解决了脑裂问题。</p> <h3><strong>2.2 Log Replication 日志复制</strong></h3> <p>选举 leader 成功后，整个集群就可以正常对外提供服务了。Leader 接收所有客户端请求，然后转化为 log 复制命令，发送通知其他节点完成日志复制请求。每个日志复制请求包括状态机命令 &amp; 任期号，同时还有前一个日志的任期号和日志索引。状态机命令表示客户端请求的数据操作指令，任期号表示 leader 的当前任期。</p> <p>follower 收到日志复制请求的处理流程：</p> <ol> <li>follower 会使用前一个日志的任期号和日志索引来对比自己的数据：</li> </ol> <ul> <li>如果相同，接收复制请求，回复 ok；</li> <li>否则回拒绝复制当前日志，回复 error；</li> </ul> <ol> <li>leader 收到拒绝复制的回复后，继续发送节点日志复制请求，不过这次会带上更前面的一个日志任期号和索引；</li> <li>如此循环往复，直到找到一个共同的任期号&amp;日志索引。此时 follower 从这个索引值开始复制，最终和 leader 节点日志保持一致；</li> <li>日志复制过程中，Leader 会无限重试直到成功。如果超过半数的节点复制日志成功，就可以任务当前数据请求达成了共识，即日志可以 commite 提交了；</li> </ol> <p>综上，<strong>Log Replication 日志复制</strong>有两个特点：</p> <ol> <li>如果在不同日志中的两个条目有着相同索引和任期号，则所存储的命令是相同的，这点是由 leader 来保证的；</li> <li>如果在不同日志中的两个条目有着相同索引和任期号，则它们之间所有条目完全一样，这点是由日志复制的规则来保证的；</li> </ol> <p>举个例子，最上面表示日志索引，这个是保证唯一性。每个方块代表指定任期内的数据操作，目前来看，LogIndex 1-4 的日志已经完成同步，LogIndex 5 的正在同步，LogIndex6 还未开始同步。Raft 日志提交的过程有点类似两阶段原子提交协议 2PC，不过和 2PC 的最大区别是，Raft 要求超过一般节点同意即可 commited，2PC 要求所有节点同意才能 commited。</p> <p class="img-center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads/20221130/193e4ef341a82617c65e10ab3e0e7f13.jpg"></p> <p><strong>日志不一致问题</strong>：在正常情况下，leader 和 follower 的日志复制能够保证整个集群的一致性，但是遇到 leader 崩溃的时候，leader 和 follower 日志可能出现了不一致的状态，此时 follower 相比 leader 缺少部分日志。</p> <p>为了解决数据不一致性，Raft 算法规定<strong>follower 强制复制 leader 节日的日志</strong>，即 follower 不一致日志都会被 leader 的日志覆盖，最终 follower 和 leader 保持一致。简单的说，从前向后寻找 follower 和 leader 第一个公共 LogIndex 的位置，然后从这个位置开始，follower 强制复制 leader 的日志。但是这么多还有其他的安全性问题，所以需要引入<strong>Safety 安全性</strong>规则 。</p> <h3><strong>2.3 Safety 安全性</strong></h3> <p>当前的<strong>Leader election 领导选举</strong>&nbsp;和<strong>Log replication 日志复制</strong>并不能保证 Raft 算法的安全性，在一些特殊情况下，可能导致数据不一致，所以需要引入下面安全性规则。</p> <h3><strong>2.3.1 Election Safety 选举安全性：避免脑裂问题</strong></h3> <p>选举安全性要求一个任期 Term 内只能有一个 leader，即不能出现脑裂现象，否者 raft 的日志复制原则很可能出现数据覆盖丢失的问题。Raft 算法通过规定若干投票原则来解决这个问题：</p> <ul> <li>一个任期内，follower 只会<strong>投票一次票</strong>，且先来先得；</li> <li>Candidate 存储的日志至少要和 follower 一样新；</li> <li>只有获得超过半数投票才有机会成为 leader；</li> </ul> <h3><strong>2.3.2 Leader Append-Only 日志只能由 leader 添加修改</strong></h3> <p>Raft 算法规定，所有的数据请求都要交给 leader 节点处理，要求：</p> <ol> <li>leader 只能日志追加日志，<strong>不能覆盖日志</strong>；</li> <li>只有 leader 的日志项才能被提交，follower 不能接收写请求和提交日志；</li> <li>只有已经提交的日志项，才能被应用到状态机中；</li> <li>选举时限制新 leader 日志包含所有已提交日志项；</li> </ol> <h3><strong>2.3.3 Log Matching 日志匹配特性</strong></h3> <p>这点主要是为了保证日志的唯一性，要求：</p> <ol> <li>如果在不同日志中的两个条目有着相同索引和任期号，则所存储的命令是相同的；</li> <li>如果在不同日志中的两个条目有着相同索引和任期号，则它们之间所有条目完全一样；</li> </ol> <h3><strong>2.3.4 Leader Completeness 选举完备性：leader 必须具备最新提交日志</strong></h3> <p>Raft 规定：只<strong>有拥有最新提交日志的 follower 节点才有资格成为 leader 节点。</strong>&nbsp;具体做法：candidate 竞选投票时会携带最新提交日志，follower 会用自己的日志和 candidate 做比较。</p> <ul> <li>如果 follower 的更新，那么拒绝这次投票；</li> <li>否则根据前面的投票规则处理。这样就可以保证只有最新提交节点成为 leader；</li> </ul> <p>因为日志提交需要超过半数的节点同意，所以针对日志同步落后的 follower（还未同步完全部日志，导致落后于其他节点）在竞选 leader 的时候，肯定拿不到超过半数的票，也只有那些完成同步的才有可能获取超过半数的票成为 leader。</p> <p>日志更新判断方式是比较日志项的 term 和 index：</p> <ul> <li>如果 TermId 不同，选择 TermId 最大的；</li> <li>如果 TermId 相同，选择 Index 最大的；</li> </ul> <p>下面举个例子来解释为什么需要这个原则，如下图，假如集群中 follower4 在 LogIndex3 故障宕机，经过一段时间间，任期 Term3 的 leader 接收并提交了很多日志（LogIndex1-5 已经提交，LogIndex6 正在复制中）。然后 follower4 恢复正常，在没有和 leader 完成同步日志的情况下，如果 leader 突然宕机，此时开始领导选举。再假设在 Term4 follower4 当选 leader。根据日志复制的规则，其他 follower 强制复制 leader 的日志，那么已经提交却没完成同步的日志将会被强制覆盖掉，这回导致已提交日志被覆盖。</p> <p class="img-center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads/20221130/3097f7529172c37a98f8c21573092032.jpg"></p> <h3><strong>2.3.5 State Machine Safety 状态机安全性：确保当前任期日志提交</strong></h3> <p>考虑到当前的日志复制规则</p> <ul> <li>当前 follower 节点强制复制 leader 节点；</li> <li>假如以前 Term 日志复制超过半数节点，在面对当前任期日志的节点比较中，很明显当前任期节点更新，有资格成为 leader；</li> </ul> <p>上述两条就可能出现已有任期日志被覆盖的情况，这意味着已复制超过半数的以前任期日志被强制覆盖了，和前面提到的日志安全性矛盾。</p> <p>所以，Raft 对日志提交有额外安全机制：leader 只能提交当前任期 Term 的日志，旧任期 Term（以前的数据）只能通过当前任期 Term 的数据提交来间接完成提交。简单的说，日志提交有两个条件需要满足：</p> <ol> <li><strong>当前任期</strong>；</li> <li><strong>复制结点超过半数</strong>；</li> </ol> <p>下面举个例子来解释为什么需要这个原则，如下图：</p> <p class="img-center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads/20221130/298b9536693f73993005ca0ba5aed042.jpg"></p> <ol> <li>任期 Term2：</li> </ol> <ul> <li>follower1 是 leader，此时 LogIndex3 已经复制到 follower2，且正在给 follower3 复制，此时 follower 突然宕机；</li> </ul> <ol> <li>任期 Term3：</li> </ol> <ul> <li>leader 选举。follower5 发起投票，可以得到自己、follower3、follower4 的票（3/5），最终成为 leader；</li> <li>在任期 Term3 内，提交接收客户请求并提交 LogIndex3-5，但是暂时未复制到其他节点，然后宕机；</li> </ul> <ol> <li>任期 Term4：</li> </ol> <ul> <li>leader 选举，follower1 发起选举，可以得到自己、follower2、follower3、follower4 的票（4/5），最终成为 leader；</li> <li>此时 follower1 将 LogIndex3 复制到 follower3，此时 LogIndex3 复制超过半数，接着在本地提交了 LogIndex4，然后宕机；</li> </ul> <ol> <li>任期 Term4：</li> </ol> <ul> <li>leader 选举：follower5 发起选举，可以得到自己、follower2、follower3、follower4 的票（4/5），最终成为 leader；</li> <li>此时其他节点需要强制复制 follower5 的日志，那么 follower1、follower2、follower3 的日志被强制覆盖掉。即虽然 LogIndex3 被复制到了超过半数节点，但也有可能被覆盖掉；</li> </ul> <p>如何解决这个问题呢？Raft 在日志项提交上增加了限制：只有<strong>当前任期</strong>&nbsp;且<strong>复制超过半数</strong>&nbsp;的日志才可以提交。即只有 LogIndex4 提交后，LogIndex3 才会被提交。</p> <h3><strong>三、Paxos VS Raft：这个世界上只有一种一致性算法，那就是 Paxos</strong></h3> <p>Basic Paxos 算法没有 leader proposer 角色，是一个纯粹的去中心化的分布式算法，但是它存在若干不足（只能单值共识 &amp; 活锁 &amp; 网络开销大）。所以才有了以 leader proposer 为核心的 Multi Paxos 算法（由一个去中心化的算法变为 leader-based 的算法）。Raft 算法相当于 Multi Paxos 的进一步优化，主要通过增加两个限制：</p> <ol> <li><strong>日志添加次序性</strong>：</li> </ol> <ul> <li>Raft 要求日志必须要串行连续添加的；</li> <li>Multi Paxos 可以并发添加日志，没有顺序性要求，所以日志可能存在空洞现象；</li> </ul> <ol> <li><strong>选主限制</strong>：</li> </ol> <ul> <li>Raft 要求只有拥有最新日志的节点才有资格当选 leader，因为日志是串行连续添加的，所以 Raft 能够根据日志确认最新节点；</li> <li>在 Multi Paxos 算法中由于日志是并发添加的，所以无法确认最新日志的节点，所以 Multi Paxos 可以选择任意节点作为了 leader proposer 节点，成为 leader 节点后需要把其他日志补全；</li> </ul> <p>下面是我个人的理解：</p> <ul> <li>作为分布式算法，Raft 的规则限制很多，但是每个规则都简单易懂，最重要的是 leader-based 的，整个程序是一个串行的流程，这使得更加容易理解和实现；</li> <li>作为对比，Multi Paxos 的限制就很少了，每个节点都可以成为 leader，并发添加日志，这使得理解和落地就没那么简单；</li> <li>不同业务场景下有着不同的述求，所以一致性算法选择 Multi Paxos 还是 Raft 看各自需求。</li> </ul> <h3><strong>四、总结</strong></h3> <p>Raft 协议就是一种 leader-based 的共识算法，算法设计出发点就是可理解性以及工程的落地性。学习总结分布式一致性算法 Paxos 和 Raft 对我们理解、设计、实现、部署、测试分布式系统都大有益处，如果文章有啥不合适的地方，希望提出宝贵意见。</p> </div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-85025.htm">2023年公务员国考报名官网（2023年国家公务员考试公告）</a></p>
                                        <p>下一个：<a href="/news/article-85755.htm">react实战系列起步（mockjs、第一个模块、docusaurus）</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-71964.htm" title="动物防疫疫苗的运输规定有哪些要求（动物防疫注射注意事项）">动物防疫疫苗的运输规定有哪些要求（动物防疫注射注意事项）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-21-free-node-subscribe.htm" title="「3月21日」最高速度21.1M/S，2025年Shadowrocket/V2ray/Clash/SSRStash免费机场订阅链接">「3月21日」最高速度21.1M/S，2025年Shadowrocket/V2ray/Clash/SSRStash免费机场订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-85025.htm" title="2023年公务员国考报名官网（2023年国家公务员考试公告）">2023年公务员国考报名官网（2023年国家公务员考试公告）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-6-latest-vless-node.htm" title="「3月6日」最高速度18.5M/S，2025年V2ray/Clash/SSR/ShadowrocketStash免费机场订阅链接">「3月6日」最高速度18.5M/S，2025年V2ray/Clash/SSR/ShadowrocketStash免费机场订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-80785.htm" title="想开一家宠物店需要投资多少费用（开一家宠物店需要投资多少钱）">想开一家宠物店需要投资多少费用（开一家宠物店需要投资多少钱）</a></li>
                        <li class="py-2"><a href="/news/article-82886.htm" title="有没有宠物批发的网站推荐（有没有宠物批发的网站推荐知乎）">有没有宠物批发的网站推荐（有没有宠物批发的网站推荐知乎）</a></li>
                        <li class="py-2"><a href="/news/article-72614.htm" title="中国兽药十强企业排名（中国兽药公司前50名）">中国兽药十强企业排名（中国兽药公司前50名）</a></li>
                        <li class="py-2"><a href="/news/article-87901.htm" title="C ++程序实施Rabin-Miller素性测试以检查给定数字是否为素数">C ++程序实施Rabin-Miller素性测试以检查给定数字是否为素数</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-28-vless-node-github.htm" title="「3月28日」最高速度22.7M/S，2025年Clash/SSR/V2ray/ShadowrocketStash免费机场订阅链接">「3月28日」最高速度22.7M/S，2025年Clash/SSR/V2ray/ShadowrocketStash免费机场订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-25-free-high-speed-nodes.htm" title="「3月25日」最高速度22.2M/S，2025年Clash/Shadowrocket/V2ray/SSRStash免费机场订阅链接">「3月25日」最高速度22.2M/S，2025年Clash/Shadowrocket/V2ray/SSRStash免费机场订阅链接</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">11</span> <a href="/date/2025-04/" title="2025-04 归档">2025-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">87</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </div>
    <!-- Fruits Shop End-->
        <!-- Copyright Start -->
    <div class="container-fluid copyright bg-dark py-4">
        <div class="container">
            <div class="row">
                <div class="col-md-12 text-center mb-3 mb-md-0">
                                        <p>
                                                <a href="/">首页</a> |
                                                <a href="/free-nodes/">免费节点</a> |
                                                <a href="/paid-subscribe/">推荐机场</a> |
                                                <a href="/client.htm">客户端</a> |
                                                <a href="/news/">新闻资讯</a> |
                                                <a href="/about-us.htm">关于我们</a> |
                        <a href="/disclaimer.htm">免责申明</a> |
                        <a href="/privacy.htm">隐私申明</a> |
                        <a href="/sitemap.xml">网站地图</a>
                    </p>
                    <span class="text-light">Stash Github机场分享官网 版权所有 Powered by WordPress</span>
                </div>
            </div>
        </div>
    </div>
    <!-- Copyright End -->
    <!-- Back to Top -->
    <a href="#" class="btn btn-primary border-3 border-primary rounded-circle back-to-top"><i class="fa fa-arrow-up"></i></a>
    <!-- JavaScript Libraries -->
    <script src="https://cdn.bootcdn.net/ajax/libs/jquery/3.6.4/jquery.min.js"></script>
    <script src="https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/5.0.0/js/bootstrap.bundle.min.js"></script>
    <script src="/assets/website/js/frontend/stashgithub/easing/easing.min.js"></script>
    <script src="/assets/website/js/frontend/stashgithub/waypoints/waypoints.min.js"></script>
    <script src="/assets/website/js/frontend/stashgithub/lightbox/js/lightbox.min.js"></script>
    <script src="/assets/website/js/frontend/stashgithub/owlcarousel/owl.carousel.min.js"></script>
    <!-- Template Javascript -->
    <script src="/assets/website/js/frontend/stashgithub/main.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>